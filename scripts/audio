#!/bin/bash

step=1
max_volume=100
notification_timeout=2000
download_album_art=true
show_album_art=true
show_music_in_volume_indicator=true

function get_volume {
  pactl get-sink-volume @DEFAULT_SINK@ | grep -Po '[0-9]{1,3}(?=%)' | head -1
}

function is_mute {
  pactl get-sink-mute @DEFAULT_SINK@ | grep -Po 'yes|no'
}

function get_volume_symbol {
  volume=$(get_volume)
  mute=$(is_mute)
  volume_symbol=""
  volume_icon="audio-volume-high"

  if [ "$volume" -eq 0 ] || [ "$mute" == "yes" ]; then
    volume_symbol=""
    volume_icon="audio-volume-muted"
  elif [ "$volume" -lt 33 ]; then
    volume_symbol=""
    volume_icon="audio-volume-low"
  elif [ "$volume" -lt 66 ]; then
    volume_symbol=""
    volume_icon="audio-volume-medium"
  fi
}

function get_album_art {
  url=$(playerctl -f "{{mpris:artUrl}}" metadata)
  if [[ $url == "file://"* ]]; then
    album_art="${url/file:\/\//}"
  elif [[ $url == "http.?://"* ]] && [[ $download_album_art == "true" ]]; then
    # Identify filename from URL
    filename="$(echo $url | sed "s/.*\///")"

    # Download file to /tmp if it doesn't exist
    if [ ! -f "/tmp/$filename" ]; then
      wget -O "/tmp/$filename" "$url"
    fi

    album_art="/tmp/$filename"
  else
	get_volume_symbol
	album_art=$volume_icon
  fi
}

function show_volume_notif {
  get_volume_symbol
  album_art=$volume_icon

  if [[ $show_music_in_volume_indicator == "true" ]]; then
    current_song=$(playerctl -f "{{title}} - {{artist}}" metadata)
    if [[ $show_album_art == "true" ]]; then
      get_album_art
    fi

    notify-send -t $notification_timeout \
	  -h string:x-dunst-stack-tag:volume_notif \
      -h int:value:$volume \
      -i "$album_art" \
      -a "volume-app" \
      "$volume_symbol   $volume%" \
      "$current_song"
  else
    notify-send -t $notification_timeout \
      -h string:x-dunst-stack-tag:volume_notif \
      -h int:value:$volume \
      "$volume_symbol   $volume%"
  fi
}

function show_music_notif {
  song_title=$(playerctl -f "{{title}}" metadata)
  song_info=$(playerctl -f "{{artist}} - {{album}}" metadata)

  if [[ $show_album_art == "true" ]]; then
    get_album_art
  fi

  notify-send -t $notification_timeout \
    -h string:x-dunst-stack-tag:music_notif \
    -i "$album_art" \
    -a "volume-app" \
    "$song_title" \
    "$song_info"
}

case $1 in
volume)
  case $2 in
  lower) sign=- ;;
  raise) sign=+ ;;
  *) wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle ;;
  esac

  [ "$3" = "big" ] && step=5

  [ "$2" == "" ] || pactl set-sink-volume @DEFAULT_SINK@ "$sign$step%"
  show_volume_notif
  ;;
microphone)
  pactl set-source-mute @DEFAULT_SOURCE@ toggle
  # amixer set Capture toggle
  ;;
player)
  case $2 in
  next) playerctl next ;;
  previous) playerctl previous ;;
  *) playerctl play-pause ;;
  esac
  show_music_notif
  ;;
sink)
  sinks=$(pactl list sinks short | awk '{print $2}')
  sinks_short=$(echo "$sinks" | awk -F'.' '{print $1}')
  selected=$(dmenu "  Output Audio: " "$sinks_short")

  sink=$(echo "$sinks" | grep "$selected")
  pactl set-default-sink "$sink"
  ;;
esac
